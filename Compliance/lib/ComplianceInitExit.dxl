/*************************************************************************************** 
// Author Gunter Mussbacher, May-Jul2005
// - Based on initial version by Bo Jiang
// - provides services for initialization and exit of applications
*/

/*************************************************************************************** 
// Author Gunter Mussbacher, May-Jun2005
// - saves and closes all open modules in a folder
// - returns false if a module remains open, true if all modules are closed
*/
bool saveCloseAllModules( Folder theFolder ) {
	Module currentModule
	bool allClosed = true

	// loops through all OPEN modules in a folder
	for currentModule in theFolder do {
		save currentModule
		close( currentModule, true )
	}
	for currentModule in theFolder do {
		allClosed = false
		break
	}
	return allClosed
}

bool openOrgModules(string folderName) {
	Module currentModule
	bool preparationOKActors = false, preparationOKIntentionalElements = false	
	bool preparationOKComponent = false, preparationResponsibility = false
	
	current = folder folderName
	
	orgActorModule = edit (fileNameOrgActors, false)
	orgIntentionalElementModule = edit(fileNameOrgIntentionalElements, false)
	orgComponentModule = edit(fileNameOrgComponents, false)
	orgResponsibilityModule = edit(fileNameOrgResponsibilities, false)
	
	for currentModule in current Folder do {
		if (currentModule."Name" "" == fileNameOrgActors)
			preparationOKActors = true
		if (currentModule."Name" "" == fileNameOrgIntentionalElements)
			preparationOKIntentionalElements = true
		if (currentModule."Name" "" == fileNameOrgComponents)
			preparationOKComponent = true
		if (currentModule."Name" "" == fileNameOrgResponsibilities)
			preparationResponsibility = true
	}
	current = folder projectFolderName
	return ( preparationOKActors && preparationOKIntentionalElements && preparationOKComponent && preparationResponsibility ) 
}

bool checkCreateOrgLinkModules(string folderName) {
	Module currentModule
	bool tracesOK = false, respOK = false, compliesOK = false, urnLinksOK = false

	current = folder folderName

	//complies link module
	if ( !( exists module fileNameOrgComplies ) ) {
		create( fileNameOrgComplies, "Complies", manyToMany, false )
	}
	orgCompliesLinkModule = edit( fileNameOrgComplies, false )

	//traces link module	
	if ( !( exists module fileNameOrgTraces ) ) {
		create( fileNameOrgTraces, "Traces", manyToMany, false )
	}
	orgTracesLinkModule = edit( fileNameOrgTraces, false )

	//responsibility link module
	if ( !( exists module fileNameOrgResps ) ) {
		create( fileNameOrgResps, "resps", manyToMany, false )
	}
	orgRespLinkModule = edit( fileNameOrgResps, false )

	//urnlinks link module
	if ( !( exists module fileNameOrgUrnLinks ) ) {
		create( fileNameOrgUrnLinks, "urnlinks", manyToMany, false )
	}
	orgUrnLinksModule = edit( fileNameOrgUrnLinks, false )

	for currentModule in current Folder do {
		if( isEdit( currentModule ) ) {
			if( currentModule."Name" "" == fileNameOrgComplies )
				compliesOK = true
			if( currentModule."Name" "" == fileNameOrgTraces )
				tracesOK = true
			if( currentModule."Name" "" == fileNameOrgResps )
				respOK = true
			if( currentModule."Name" "" == fileNameOrgUrnLinks )
				urnLinksOK = true
		}
	}
	current = folder projectFolderName
	return (compliesOK && tracesOK && respOK && urnLinksOK)
}

bool openLegModules(string folderName) {
	Module currentModule
	bool actorsOK = false, intentionalElementsOK = false, clauseOK = false, defOK = false
	
	current = folder folderName
	
	legActorModule = edit(fileNameLegActors, false)
	legIntetionalElementModule = edit(fileNameLegIntentionalElements, false)
	legDefModule = edit(fileNameLegDef, false)
	legClauseModule = edit(fileNameLegClause, false)
	
	for currentModule in current Folder do {
		if (currentModule."Name" "" == fileNameLegActors)
			actorsOK = true
		if (currentModule."Name" "" == fileNameLegIntentionalElements)
			intentionalElementsOK = true
		if (currentModule."Name" "" == fileNameLegClause)
			clauseOK = true
		if (currentModule."Name" "" == fileNameLegDef)
			defOK = true
	}
	current = folder projectFolderName
	return (actorsOK && intentionalElementsOK && clauseOK && defOK) 
}

bool checkCreateLegLinkModules(string folderName) {
	Module currentModule
	bool sourcesOK = false

	current = folder folderName

	//complies link module
	if ( !( exists module fileNameLegSources ) ) {
		create( fileNameLegSources, "Sources", manyToMany, false )
	}
	legSourcesLinkModule = edit( fileNameLegSources, false )

	for currentModule in current Folder do {
		if( isEdit( currentModule ) ) {
			if( currentModule."Name" "" == fileNameLegSources )
				sourcesOK = true
		}
	}
	current = folder projectFolderName
	return (sourcesOK)
}

bool saveCloseFinal() {
	bool finalOK1 = false, finalOK2 = false, finalOK3 = false

	current = folder (projectFolderName "")

	//close the legislation folder
	current = folder (legFolderName "")
	finalOK2 = saveCloseAllModules( current() )
	closeFolder()

	//close the organization folder
	current = folder (orgFolderName "")
	finalOK1 = saveCloseAllModules( current() )
	closeFolder()
	
	//close the project
	finalOK3 = saveCloseAllModules( current() )

	
	return ( finalOK1 && finalOK2 && finalOK3  )
}
